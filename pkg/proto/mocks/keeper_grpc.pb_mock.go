// Code generated by MockGen. DO NOT EDIT.
// Source: pkg\proto\keeper_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=pkg\proto\keeper_grpc.pb.go -destination=pkg\proto\mocks\keeper_grpc.pb_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	proto "go-pass-keeper/pkg/proto"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockKeeperClient is a mock of KeeperClient interface.
type MockKeeperClient struct {
	ctrl     *gomock.Controller
	recorder *MockKeeperClientMockRecorder
	isgomock struct{}
}

// MockKeeperClientMockRecorder is the mock recorder for MockKeeperClient.
type MockKeeperClientMockRecorder struct {
	mock *MockKeeperClient
}

// NewMockKeeperClient creates a new mock instance.
func NewMockKeeperClient(ctrl *gomock.Controller) *MockKeeperClient {
	mock := &MockKeeperClient{ctrl: ctrl}
	mock.recorder = &MockKeeperClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeeperClient) EXPECT() *MockKeeperClientMockRecorder {
	return m.recorder
}

// AddSecret mocks base method.
func (m *MockKeeperClient) AddSecret(ctx context.Context, in *proto.AddSecretRequest, opts ...grpc.CallOption) (*proto.AddSecretResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddSecret", varargs...)
	ret0, _ := ret[0].(*proto.AddSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSecret indicates an expected call of AddSecret.
func (mr *MockKeeperClientMockRecorder) AddSecret(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSecret", reflect.TypeOf((*MockKeeperClient)(nil).AddSecret), varargs...)
}

// DeleteSecret mocks base method.
func (m *MockKeeperClient) DeleteSecret(ctx context.Context, in *proto.DeleteSecretRequest, opts ...grpc.CallOption) (*proto.DeleteSecretResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSecret", varargs...)
	ret0, _ := ret[0].(*proto.DeleteSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockKeeperClientMockRecorder) DeleteSecret(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockKeeperClient)(nil).DeleteSecret), varargs...)
}

// GetSecret mocks base method.
func (m *MockKeeperClient) GetSecret(ctx context.Context, in *proto.GetSecretRequest, opts ...grpc.CallOption) (*proto.GetSecretResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSecret", varargs...)
	ret0, _ := ret[0].(*proto.GetSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockKeeperClientMockRecorder) GetSecret(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockKeeperClient)(nil).GetSecret), varargs...)
}

// GetSecrets mocks base method.
func (m *MockKeeperClient) GetSecrets(ctx context.Context, in *proto.GetSecretsRequest, opts ...grpc.CallOption) (*proto.GetSecretsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSecrets", varargs...)
	ret0, _ := ret[0].(*proto.GetSecretsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecrets indicates an expected call of GetSecrets.
func (mr *MockKeeperClientMockRecorder) GetSecrets(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecrets", reflect.TypeOf((*MockKeeperClient)(nil).GetSecrets), varargs...)
}

// MockKeeperServer is a mock of KeeperServer interface.
type MockKeeperServer struct {
	ctrl     *gomock.Controller
	recorder *MockKeeperServerMockRecorder
	isgomock struct{}
}

// MockKeeperServerMockRecorder is the mock recorder for MockKeeperServer.
type MockKeeperServerMockRecorder struct {
	mock *MockKeeperServer
}

// NewMockKeeperServer creates a new mock instance.
func NewMockKeeperServer(ctrl *gomock.Controller) *MockKeeperServer {
	mock := &MockKeeperServer{ctrl: ctrl}
	mock.recorder = &MockKeeperServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeeperServer) EXPECT() *MockKeeperServerMockRecorder {
	return m.recorder
}

// AddSecret mocks base method.
func (m *MockKeeperServer) AddSecret(arg0 context.Context, arg1 *proto.AddSecretRequest) (*proto.AddSecretResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSecret", arg0, arg1)
	ret0, _ := ret[0].(*proto.AddSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSecret indicates an expected call of AddSecret.
func (mr *MockKeeperServerMockRecorder) AddSecret(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSecret", reflect.TypeOf((*MockKeeperServer)(nil).AddSecret), arg0, arg1)
}

// DeleteSecret mocks base method.
func (m *MockKeeperServer) DeleteSecret(arg0 context.Context, arg1 *proto.DeleteSecretRequest) (*proto.DeleteSecretResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", arg0, arg1)
	ret0, _ := ret[0].(*proto.DeleteSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockKeeperServerMockRecorder) DeleteSecret(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockKeeperServer)(nil).DeleteSecret), arg0, arg1)
}

// GetSecret mocks base method.
func (m *MockKeeperServer) GetSecret(arg0 context.Context, arg1 *proto.GetSecretRequest) (*proto.GetSecretResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockKeeperServerMockRecorder) GetSecret(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockKeeperServer)(nil).GetSecret), arg0, arg1)
}

// GetSecrets mocks base method.
func (m *MockKeeperServer) GetSecrets(arg0 context.Context, arg1 *proto.GetSecretsRequest) (*proto.GetSecretsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecrets", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetSecretsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecrets indicates an expected call of GetSecrets.
func (mr *MockKeeperServerMockRecorder) GetSecrets(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecrets", reflect.TypeOf((*MockKeeperServer)(nil).GetSecrets), arg0, arg1)
}

// mustEmbedUnimplementedKeeperServer mocks base method.
func (m *MockKeeperServer) mustEmbedUnimplementedKeeperServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedKeeperServer")
}

// mustEmbedUnimplementedKeeperServer indicates an expected call of mustEmbedUnimplementedKeeperServer.
func (mr *MockKeeperServerMockRecorder) mustEmbedUnimplementedKeeperServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedKeeperServer", reflect.TypeOf((*MockKeeperServer)(nil).mustEmbedUnimplementedKeeperServer))
}

// MockUnsafeKeeperServer is a mock of UnsafeKeeperServer interface.
type MockUnsafeKeeperServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeKeeperServerMockRecorder
	isgomock struct{}
}

// MockUnsafeKeeperServerMockRecorder is the mock recorder for MockUnsafeKeeperServer.
type MockUnsafeKeeperServerMockRecorder struct {
	mock *MockUnsafeKeeperServer
}

// NewMockUnsafeKeeperServer creates a new mock instance.
func NewMockUnsafeKeeperServer(ctrl *gomock.Controller) *MockUnsafeKeeperServer {
	mock := &MockUnsafeKeeperServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeKeeperServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeKeeperServer) EXPECT() *MockUnsafeKeeperServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedKeeperServer mocks base method.
func (m *MockUnsafeKeeperServer) mustEmbedUnimplementedKeeperServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedKeeperServer")
}

// mustEmbedUnimplementedKeeperServer indicates an expected call of mustEmbedUnimplementedKeeperServer.
func (mr *MockUnsafeKeeperServerMockRecorder) mustEmbedUnimplementedKeeperServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedKeeperServer", reflect.TypeOf((*MockUnsafeKeeperServer)(nil).mustEmbedUnimplementedKeeperServer))
}
