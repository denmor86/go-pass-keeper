package models

import (
	"go-pass-keeper/internal/models"
	"go-pass-keeper/internal/tui/messages"
	"go-pass-keeper/internal/tui/styles"

	"github.com/charmbracelet/bubbles/textarea"
	"github.com/charmbracelet/bubbles/textinput"
	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/lipgloss"
)

type TextSecretModel struct {
	nameInput  textinput.Model
	textArea   textarea.Model
	focused    bool
	windowSize tea.WindowSizeMsg
	isViewMode bool                // –§–ª–∞–≥ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
	secretData messages.SecretText // –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
}

func NewTextSecretModel() TextSecretModel {
	model := TextSecretModel{
		focused:    false,
		isViewMode: false,
	}

	model.nameInput = textinput.New()
	model.nameInput.Placeholder = "–ù–∞–∑–≤–∞–Ω–∏–µ"
	model.nameInput.CharLimit = 50
	model.nameInput.TextStyle = styles.BlurredStyle

	model.textArea = textarea.New()
	model.textArea.Placeholder = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–¥–µ—Å—å..."
	model.textArea.SetWidth(50)
	model.textArea.SetHeight(8)

	model.nameInput.Focus()

	return model
}

func (m TextSecretModel) Init() tea.Cmd {
	return textinput.Blink
}

func (m TextSecretModel) Update(msg tea.Msg) (TextSecretModel, tea.Cmd) {
	var cmds []tea.Cmd

	switch msg := msg.(type) {
	case tea.WindowSizeMsg:
		m.windowSize = msg
		m.textArea.SetWidth(msg.Width - 20)
		return m, nil

	case messages.GetSecretTextMsg:
		// –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
		m.isViewMode = true
		m.secretData = msg.Data

		// –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
		m.nameInput.SetValue(msg.Data.Name)
		m.textArea.SetValue(msg.Data.Text)
		return m, nil

	case tea.KeyMsg:
		// –í —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ ESC
		if m.isViewMode {
			switch msg.String() {
			case "esc":
				m.isViewMode = false
				return m, func() tea.Msg {
					return messages.SecretAddCancelMsg{}
				}
			}
			return m, nil
		}

		// –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
		switch msg.String() {
		case "tab":
			if m.focused {
				m.textArea.Blur()
				m.focused = false
				return m, m.nameInput.Focus()
			} else {
				m.nameInput.Blur()
				m.focused = true
				return m, m.textArea.Focus()
			}

		case "enter":
			return m, m.attemptAddSecret(m.nameInput.Value(), m.textArea.Value())

		case "esc":
			return m, func() tea.Msg {
				return messages.SecretAddCancelMsg{}
			}
		}
	}

	// –í —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
	if m.isViewMode {
		return m, nil
	}

	var cmd tea.Cmd
	if m.focused {
		m.textArea, cmd = m.textArea.Update(msg)
	} else {
		m.nameInput, cmd = m.nameInput.Update(msg)
	}
	cmds = append(cmds, cmd)

	return m, tea.Batch(cmds...)
}

func (m TextSecretModel) View() string {
	title := "üìù –¢–µ–∫—Å—Ç"
	buttons := lipgloss.JoinHorizontal(
		lipgloss.Center,
		styles.ButtonStyle.Render("Enter - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å"),
		styles.DividerStyle.Render(),
		styles.ButtonStyle.Render("ESC - –û—Ç–º–µ–Ω–∞"),
	)
	hint := "Tab: –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –ø–æ–ª—è–º–∏"

	// –í —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∫–Ω–æ–ø–∫–∏ –∏ –ø–æ–¥—Å–∫–∞–∑–∫—É
	if m.isViewMode {
		title = "üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—Å—Ç–∞"
		buttons = styles.ButtonStyle.Render("ESC - –ó–∞–∫—Ä—ã—Ç—å")
		hint = "–†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
	}

	content := lipgloss.JoinVertical(
		lipgloss.Center,
		styles.TitleStyle.
			Width(40).
			Render(title),

		lipgloss.NewStyle().Height(1).Render(""),

		m.renderInputField("üìù –ù–∞–∑–≤–∞–Ω–∏–µ:", m.nameInput),

		lipgloss.NewStyle().Height(1).Render(""),

		lipgloss.NewStyle().
			Foreground(styles.TextSecondary).
			Render("–¢–µ–∫—Å—Ç:"),

		m.renderTextArea(m.textArea),

		lipgloss.NewStyle().Height(2).Render(""),

		buttons,

		lipgloss.NewStyle().Height(1).Render(""),

		lipgloss.NewStyle().
			Foreground(styles.TextSecondary).
			Italic(true).
			Render(hint),
	)

	return styles.ContainerStyle.
		Width(m.windowSize.Width).
		Height(m.windowSize.Height).
		Render(
			lipgloss.Place(
				m.windowSize.Width, m.windowSize.Height,
				lipgloss.Center, lipgloss.Center,
				content,
				lipgloss.WithWhitespaceChars(" "),
				lipgloss.WithWhitespaceForeground(styles.BackgroundColor),
			),
		)
}

func (m TextSecretModel) renderInputField(label string, input textinput.Model) string {
	var inputStyle lipgloss.Style
	if (!m.focused && !m.isViewMode) || (m.isViewMode && m.focused) {
		inputStyle = styles.FocusedInputFieldStyle
	} else {
		inputStyle = styles.InputFieldStyle
	}

	var fieldView string
	if m.isViewMode {
		// –í —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–µ –±–µ–∑ –∫—É—Ä—Å–æ—Ä–∞
		fieldView = input.Value()
		if fieldView == "" {
			fieldView = " "
		}
	} else {
		fieldView = input.View()
	}

	return lipgloss.JoinVertical(
		lipgloss.Left,
		styles.InputLabelStyle.Render(label),
		inputStyle.Render(fieldView),
	) + "\n"
}

func (m TextSecretModel) renderTextArea(area textarea.Model) string {

	var areaView string
	if m.isViewMode {
		// –í —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–µ –±–µ–∑ –∫—É—Ä—Å–æ—Ä–∞
		areaView = area.Value()
		if areaView == "" {
			areaView = " "
		}
	} else {
		areaView = area.View()
	}

	return styles.InputFieldStyle.Width(60).Height(12).Render(areaView)
}

// attemptAddSecret - –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞
func (m TextSecretModel) attemptAddSecret(name string, text string) tea.Cmd {
	return func() tea.Msg {
		if len(name) == 0 {
			return messages.ErrorMsg("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å –∏–º—è —Å–µ–∫—Ä–µ—Ç–∞")
		}
		if len(text) == 0 {
			return messages.ErrorMsg("–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç —Å–µ–∫—Ä–µ—Ç–∞")
		}
		return messages.AddSecretTextMsg{
			Data: messages.SecretText{
				Name: name,
				Type: models.SecretTextType,
				Text: text,
			},
		}
	}
}
