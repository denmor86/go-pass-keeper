package models

import (
	"context"
	"fmt"
	"go-pass-keeper/internal/grpcclient"
	"go-pass-keeper/internal/grpcclient/settings"
	"go-pass-keeper/internal/models"
	"go-pass-keeper/internal/tui/messages"
	"go-pass-keeper/internal/tui/styles"
	"go-pass-keeper/pkg/crypto"
	"time"

	"github.com/charmbracelet/bubbles/table"
	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/lipgloss"
)

type ViewerState int

const (
	ViewerListState ViewerState = iota
	SecretViewState
	SecretAddState
)

// –ö–Ω–æ–ø–∫–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –æ–∫–Ω–µ
const (
	AddButton = iota
	ViewButton
	DeleteButton
	UpdateButton
)

type ViewerModel struct {
	state          ViewerState
	table          table.Model
	secrets        []*models.SecretInfo
	windowSize     tea.WindowSizeMsg
	focusedBtn     int
	addModel       SecretAddModel
	selectedSecret *models.SecretInfo
	connection     *settings.Connection
	token          string
	cryptoKey      []byte
}

func NewViewerModel(connection *settings.Connection) ViewerModel {
	return ViewerModel{
		state:      ViewerListState,
		table:      createTable(),
		focusedBtn: 0,
		addModel:   NewSecretAddModel(),
		connection: connection,
	}
}

func (m ViewerModel) Init() tea.Cmd {
	return m.attemptGetSecrets()
}

func (m ViewerModel) Update(msg tea.Msg) (ViewerModel, tea.Cmd) {
	switch msg := msg.(type) {
	case tea.WindowSizeMsg:
		return m.updateWindowsSize(msg)

	case tea.KeyMsg:
		switch msg.Type {
		case tea.KeyCtrlC:
			return m, tea.Quit
		case tea.KeyEsc:
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ ESC –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
			switch m.state {
			case ViewerListState:
				// –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
				return m, func() tea.Msg { return messages.GotoMainPageMsg{} }
			case SecretViewState, SecretAddState:
				m.state = ViewerListState
				return m, nil
			}
		}
	case messages.AuthSuccessMsg:
		return m, m.handleAuthAction(msg)

	case messages.AddSecretPasswordMsg:
		m.state = ViewerListState
		return m, m.attemptAddSecret(&msg)

	case messages.AddSecretCardMsg:
		m.state = ViewerListState
		return m, m.attemptAddSecret(&msg)

	case messages.SecretRefreshMsg:
		m.secrets = msg.Secrets
		m.refreshViewer()
	}

	switch m.state {
	case SecretAddState:
		return m.handleAddState(msg)
	case SecretViewState:
		return m.handleViewState(msg)
	default:
		return m.handleListState(msg)
	}
}

// updateWindowsSize - –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –æ–∫–æ–Ω
func (m ViewerModel) updateWindowsSize(msg tea.WindowSizeMsg) (ViewerModel, tea.Cmd) {
	m.windowSize = msg

	// –ü–µ—Ä–µ–¥–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞ –≤—Å–µ–º –¥–æ—á–µ—Ä–Ω–∏–º –º–æ–¥–µ–ª—è–º
	updatedAddModel, addModelCmd := m.addModel.Update(msg)
	m.addModel = updatedAddModel

	return m, tea.Batch(addModelCmd)
}

func (m ViewerModel) handleListState(msg tea.Msg) (ViewerModel, tea.Cmd) {
	var cmd tea.Cmd

	switch msg := msg.(type) {
	case tea.KeyMsg:
		switch msg.String() {
		case "r", "R": // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
			return m.refreshViewer(), nil

		case "left", "h": // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫
			if m.focusedBtn > 0 {
				m.focusedBtn--
			}
			return m, nil

		case "right", "l": // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫
			if m.focusedBtn < 3 {
				m.focusedBtn++
			}
			return m, nil

		case "enter": // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
			return m.handleEnterAction()

		case "esc": // –í—ã—Ö–æ–¥ –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤
			return m, nil
		}
	}

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–ø–∏—Å–∫–∞
	if m.state == ViewerListState {
		m.table, cmd = m.table.Update(msg)
	}

	return m, cmd
}

func (m ViewerModel) handleAddState(msg tea.Msg) (ViewerModel, tea.Cmd) {
	// –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –º–æ–¥–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
	updatedModel, cmd := m.addModel.Update(msg)
	m.addModel = updatedModel
	return m, cmd
}

func (m ViewerModel) handleViewState(msg tea.Msg) (ViewerModel, tea.Cmd) {
	// ESC –≤ –æ–∫–Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ - –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Å–µ–∫—Ä–µ—Ç–æ–≤
	if keyMsg, ok := msg.(tea.KeyMsg); ok && keyMsg.String() == "esc" {
		m.state = ViewerListState
	}
	return m, nil
}

func (m ViewerModel) handleEnterAction() (ViewerModel, tea.Cmd) {
	// –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å"
	if m.focusedBtn == AddButton {
		m.state = SecretAddState
		return m, m.addModel.Init()
	}
	if len(m.table.Rows()) == 0 {
		return m, nil
	}
	selectedID := m.table.SelectedRow()[0]
	for i := range m.secrets {
		if m.secrets[i].ID == selectedID {
			m.selectedSecret = m.secrets[i]
			m.state = SecretViewState
			return m, nil
		}
	}
	// –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–ü—Ä–æ—Å–º–æ—Ç—Ä" –ò –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
	if m.focusedBtn == ViewButton && m.table.SelectedRow() != nil {
		return m, nil
	}

	// –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å" –∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
	if m.focusedBtn == DeleteButton && m.table.SelectedRow() != nil {
		return m, m.attemptDeleteSecret(selectedID)
	}

	// –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–û–±–Ω–æ–≤–∏—Ç—å"
	if m.focusedBtn == UpdateButton {
		return m, m.attemptGetSecrets()
	}

	return m, nil
}

func (m ViewerModel) refreshViewer() ViewerModel {
	m.table.SetRows(createTableRows(m.secrets))
	return m
}

func (m ViewerModel) View() string {
	switch m.state {
	case ViewerListState:
		return m.renderViewerListView()
	case SecretViewState:
		return m.renderSecretView()
	case SecretAddState:
		return m.addModel.View()
	default:
		return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
	}
}

func createTable() table.Model {
	columns := []table.Column{
		{Title: "ID", Width: 4},
		{Title: "–ù–∞–∑–≤–∞–Ω–∏–µ", Width: 20},
		{Title: "–¢–∏–ø", Width: 12},
		{Title: "–°–æ–∑–¥–∞–Ω", Width: 12},
		{Title: "–û–±–Ω–æ–≤–ª–µ–Ω", Width: 12},
	}

	t := table.New(
		table.WithColumns(columns),
		table.WithFocused(true),
		table.WithHeight(10),
	)

	s := table.DefaultStyles()
	s.Header = styles.TableHeaderStyle.
		BorderStyle(lipgloss.NormalBorder()).
		BorderForeground(lipgloss.Color("240")).
		BorderBottom(true)

	s.Selected = styles.TableSelectedStyle.
		Foreground(lipgloss.Color("229")).
		Background(lipgloss.Color("57"))

	t.SetStyles(s)

	return t
}

func createTableRows(secrets []*models.SecretInfo) []table.Row {
	rows := make([]table.Row, len(secrets))
	for i, secret := range secrets {
		rows[i] = table.Row{
			secret.ID,
			secret.Name,
			secret.Type,
			secret.Created.Local().Format(time.UnixDate),
			secret.Updated.Local().Format(time.UnixDate),
		}
	}
	return rows
}

// –ú–µ—Ç–æ–¥—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
func (m ViewerModel) renderViewerListView() string {
	content := lipgloss.JoinVertical(
		lipgloss.Center,
		styles.TitleStyle.
			Width(m.windowSize.Width-10).
			Render("üîí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–∞–º–∏"),

		lipgloss.NewStyle().Height(2).Render(""),

		styles.TableStyle.
			Width(m.table.Width()).
			Render(m.table.View()),

		lipgloss.NewStyle().Height(2).Render(""),

		m.renderButtons(),

		lipgloss.NewStyle().Height(1).Render(""),

		m.renderHelpText(),
	)

	return styles.ContainerStyle.
		Width(m.windowSize.Width).
		Height(m.windowSize.Height).
		Render(
			lipgloss.Place(
				m.windowSize.Width, m.windowSize.Height,
				lipgloss.Center, lipgloss.Center,
				content,
				lipgloss.WithWhitespaceChars(" "),
				lipgloss.WithWhitespaceForeground(styles.BackgroundColor),
			),
		)
}

func (m ViewerModel) renderButtons() string {
	buttons := []string{
		m.renderButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", AddButton),
		m.renderButton("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä", ViewButton),
		m.renderButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", DeleteButton),
		m.renderButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", UpdateButton),
	}

	return lipgloss.JoinHorizontal(
		lipgloss.Center,
		buttons...,
	)
}

func (m ViewerModel) renderButton(text string, index int) string {
	if index == m.focusedBtn {
		return styles.ActiveButtonStyle.
			Width(15).
			Height(2).
			Render(text)
	}
	return styles.ButtonStyle.
		Width(15).
		Height(2).
		Render(text)
}

func (m ViewerModel) renderHelpText() string {
	helpText := "‚Üë/‚Üì: –≤—ã–±–æ—Ä —Å–µ–∫—Ä–µ—Ç–∞ ‚Ä¢ ‚Üê/‚Üí: –≤—ã–±–æ—Ä –∫–Ω–æ–ø–∫–∏ ‚Ä¢ Enter: –¥–µ–π—Å—Ç–≤–∏–µ ‚Ä¢ R: –æ–±–Ω–æ–≤–∏—Ç—å ‚Ä¢ ESC: –≤—ã—Ö–æ–¥"

	if m.table.SelectedRow() != nil {
		helpText += " ‚Ä¢ –í—ã–±—Ä–∞–Ω–æ: " + m.table.SelectedRow()[1]
	}

	return lipgloss.NewStyle().
		Foreground(styles.TextSecondary).
		Italic(true).
		Render(helpText)
}

func (m ViewerModel) renderSecretView() string {
	if m.selectedSecret == nil {
		return "–û—à–∏–±–∫–∞: —Å–µ–∫—Ä–µ—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω"
	}

	secret := m.selectedSecret
	content := lipgloss.JoinVertical(
		lipgloss.Center,
		styles.TitleStyle.
			Width(40).
			Render("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–µ–∫—Ä–µ—Ç–∞"),

		lipgloss.NewStyle().Height(2).Render(""),

		lipgloss.JoinVertical(
			lipgloss.Left,
			m.renderSecretField("ID:", secret.ID),
			m.renderSecretField("–ù–∞–∑–≤–∞–Ω–∏–µ:", secret.Name),
			m.renderSecretField("–¢–∏–ø:", secret.Type),
			m.renderSecretField("–°–æ–∑–¥–∞–Ω:", secret.Created.Local().Format(time.UnixDate)),
			m.renderSecretField("–û–±–Ω–æ–≤–ª–µ–Ω:", secret.Updated.Local().Format(time.UnixDate)),
		),

		lipgloss.NewStyle().Height(2).Render(""),

		styles.ButtonStyle.
			Width(20).
			Render("ESC: –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"),
	)

	return styles.ContainerStyle.
		Width(m.windowSize.Width).
		Height(m.windowSize.Height).
		Render(
			lipgloss.Place(
				m.windowSize.Width, m.windowSize.Height,
				lipgloss.Center, lipgloss.Center,
				content,
				lipgloss.WithWhitespaceChars(" "),
				lipgloss.WithWhitespaceForeground(styles.BackgroundColor),
			),
		)
}

func (m ViewerModel) renderSecretField(label, value string) string {
	return lipgloss.JoinHorizontal(
		lipgloss.Left,
		lipgloss.NewStyle().
			Foreground(styles.TextSecondary).
			Width(12).
			Render(label),
		lipgloss.NewStyle().
			Foreground(styles.TextPrimary).
			Bold(true).
			Render(value),
	) + "\n"
}

// attemptGetSecrets - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–æ–≤
func (m ViewerModel) attemptGetSecrets() tea.Cmd {
	return func() tea.Msg {
		ctx, cancel := context.WithTimeout(context.Background(), time.Duration(m.connection.Timeout)*time.Second)
		client := grpcclient.NewKeeperClient(m.connection.ServerAddress(), m.token)
		defer func() {
			cancel()
			client.Close()
		}()
		if err := client.Connect(ctx); err != nil {
			return messages.ErrorMsg(fmt.Sprintf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ %s: %s", m.connection.ServerAddress(), err.Error()))
		}
		secrets, err := client.GetSecrets()
		if err != nil {
			return messages.ErrorMsg(fmt.Sprintf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: %s", err.Error()))
		}
		return messages.SecretRefreshMsg{Secrets: secrets}
	}
}

// attemptDeleteSecret - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞
func (m ViewerModel) attemptDeleteSecret(sid string) tea.Cmd {
	return func() tea.Msg {
		ctx, cancel := context.WithTimeout(context.Background(), time.Duration(m.connection.Timeout)*time.Second)
		client := grpcclient.NewKeeperClient(m.connection.ServerAddress(), m.token)
		defer func() {
			cancel()
			client.Close()
		}()
		if err := client.Connect(ctx); err != nil {
			return messages.ErrorMsg(fmt.Sprintf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ %s: %s", m.connection.ServerAddress(), err.Error()))
		}
		id, err := client.DeleteSecret(sid)
		if err != nil {
			return messages.ErrorMsg(fmt.Sprintf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞: %s", err.Error()))
		}
		return messages.SecretDeleteMsg{Id: id}
	}
}

// attemptAddSecret - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞
func (m ViewerModel) attemptAddSecret(converter messages.EncryptConverter) tea.Cmd {
	return func() tea.Msg {
		info, content, err := converter.ToModel(m.cryptoKey)
		if err != nil {
			return messages.ErrorMsg(fmt.Sprintf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞: %s", err.Error()))
		}
		ctx, cancel := context.WithTimeout(context.Background(), time.Duration(m.connection.Timeout)*time.Second)
		client := grpcclient.NewKeeperClient(m.connection.ServerAddress(), m.token)
		defer func() {
			cancel()
			client.Close()
		}()
		if err := client.Connect(ctx); err != nil {
			return messages.ErrorMsg(fmt.Sprintf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ %s: %s", m.connection.ServerAddress(), err.Error()))
		}
		_, err = client.AddSecret(info, content)
		if err != nil {
			return messages.ErrorMsg(fmt.Sprintf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞: %s", err.Error()))
		}
		return messages.SecretUpdateMsg{}
	}
}

// attemptGetSecret - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞
func (m ViewerModel) attemptGetSecret(sid string) tea.Cmd {
	return func() tea.Msg {
		ctx, cancel := context.WithTimeout(context.Background(), time.Duration(m.connection.Timeout)*time.Second)
		client := grpcclient.NewKeeperClient(m.connection.ServerAddress(), m.token)
		defer func() {
			cancel()
			client.Close()
		}()
		if err := client.Connect(ctx); err != nil {
			return messages.ErrorMsg(fmt.Sprintf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ %s: %s", m.connection.ServerAddress(), err.Error()))
		}
		info, content, err := client.GetSecret(sid)
		if err != nil {
			return messages.ErrorMsg(fmt.Sprintf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞: %s", err.Error()))
		}
		return messages.ToMessage(m.cryptoKey, info, content)
	}
}

// attemptAddSecret - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞
func (m ViewerModel) handleAuthAction(msg messages.AuthSuccessMsg) tea.Cmd {
	return func() tea.Msg {
		m.token = msg.Token
		key, err := crypto.MakeCryptoKey("secret", msg.Salt)
		if err != nil {
			return messages.ErrorMsg(fmt.Sprintf("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞: %s", err.Error()))
		}
		m.cryptoKey = key
		return messages.SecretUpdateMsg{}
	}
}
