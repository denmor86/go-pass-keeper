package models

import (
	"go-pass-keeper/internal/models"
	"go-pass-keeper/internal/tui/messages"
	"go-pass-keeper/internal/tui/styles"
	"os"
	"path/filepath"

	"github.com/charmbracelet/bubbles/textinput"
	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/lipgloss"
)

type FileSecretModel struct {
	filePathInput textinput.Model
	windowSize    tea.WindowSizeMsg
	isViewMode    bool                  // –§–ª–∞–≥ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
	secretData    messages.SecretBinary // –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
}

func NewFileSecretModel() FileSecretModel {
	model := FileSecretModel{
		isViewMode: false,
	}

	model.filePathInput = textinput.New()
	model.filePathInput.Placeholder = "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"
	model.filePathInput.CharLimit = 255
	model.filePathInput.TextStyle = styles.FocusedStyle
	model.filePathInput.PromptStyle = styles.FocusedStyle

	model.filePathInput.Focus()

	return model
}

func (m FileSecretModel) Init() tea.Cmd {
	return textinput.Blink
}

func (m FileSecretModel) Update(msg tea.Msg) (FileSecretModel, tea.Cmd) {
	var cmds []tea.Cmd

	switch msg := msg.(type) {
	case tea.WindowSizeMsg:
		m.windowSize = msg
		return m, nil

	case messages.GetSecretBinaryMsg:
		// –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
		m.isViewMode = true
		m.secretData = msg.Data

		// –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
		m.filePathInput.SetValue(msg.Data.Name)
		return m, nil

	case tea.KeyMsg:
		// –í —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Enter (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ) –∏ ESC
		if m.isViewMode {
			switch msg.String() {
			case "enter":
				return m, m.attemptSaveFile(m.secretData)
			case "esc":
				m.isViewMode = false
				return m, func() tea.Msg {
					return messages.SecretAddCancelMsg{}
				}
			}
			return m, nil
		}

		// –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
		switch msg.String() {
		case "enter":
			return m, m.attemptAddSecret(m.filePathInput.Value())

		case "esc":
			return m, func() tea.Msg {
				return messages.SecretAddCancelMsg{}
			}
		}
	}

	// –í —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
	if m.isViewMode {
		return m, nil
	}

	var cmd tea.Cmd
	m.filePathInput, cmd = m.filePathInput.Update(msg)
	cmds = append(cmds, cmd)

	return m, tea.Batch(cmds...)
}

func (m FileSecretModel) View() string {
	fileInfo := ""

	if m.isViewMode {
		// –í —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
		fileInfo = "–§–∞–π–ª: " + m.secretData.Name
		if m.secretData.Blob != nil {
			fileInfo += " | –ì–æ—Ç–æ–≤ –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é"
		}
	} else if m.filePathInput.Value() != "" {
		// –í —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
		fileInfo = "–ü—É—Ç—å: " + m.filePathInput.Value()

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
		if _, err := os.Stat(m.filePathInput.Value()); err == nil {
			fileInfo += " ‚úì –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
		} else {
			fileInfo += " ‚úó –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
		}
	}

	title := "üìÅ –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"
	buttons := lipgloss.JoinHorizontal(
		lipgloss.Center,
		styles.ButtonStyle.Render("Enter - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å"),
		styles.DividerStyle.Render(),
		styles.ButtonStyle.Render("ESC - –û—Ç–º–µ–Ω–∞"),
	)
	hint := "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"

	// –í —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∫–Ω–æ–ø–∫–∏ –∏ –ø–æ–¥—Å–∫–∞–∑–∫—É
	if m.isViewMode {
		title = "üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–∞"
		buttons = lipgloss.JoinHorizontal(
			lipgloss.Center,
			styles.ButtonStyle.Render("Enter - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞ –¥–∏—Å–∫"),
			styles.DividerStyle.Render(),
			styles.ButtonStyle.Render("ESC - –ó–∞–∫—Ä—ã—Ç—å"),
		)
		hint = "–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫"
	}

	content := lipgloss.JoinVertical(
		lipgloss.Center,
		styles.TitleStyle.
			Width(40).
			Render(title),

		lipgloss.NewStyle().Height(2).Render(""),

		m.renderInputField("üìÅ –ò–º—è —Ñ–∞–π–ª–∞:", m.filePathInput),

		lipgloss.NewStyle().Height(1).Render(""),

		lipgloss.NewStyle().
			Foreground(styles.TextSecondary).
			Italic(true).
			Render(fileInfo),

		lipgloss.NewStyle().Height(2).Render(""),

		buttons,

		lipgloss.NewStyle().Height(1).Render(""),

		lipgloss.NewStyle().
			Foreground(styles.TextSecondary).
			Italic(true).
			Render(hint),
	)

	return styles.ContainerStyle.
		Width(m.windowSize.Width).
		Height(m.windowSize.Height).
		Render(
			lipgloss.Place(
				m.windowSize.Width, m.windowSize.Height,
				lipgloss.Center, lipgloss.Center,
				content,
				lipgloss.WithWhitespaceChars(" "),
				lipgloss.WithWhitespaceForeground(styles.BackgroundColor),
			),
		)
}

func (m FileSecretModel) renderInputField(label string, input textinput.Model) string {
	var inputStyle lipgloss.Style
	if m.isViewMode {
		inputStyle = styles.InputFieldStyle
	} else {
		inputStyle = styles.FocusedInputFieldStyle
	}

	var fieldView string
	if m.isViewMode {
		// –í —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–µ –±–µ–∑ –∫—É—Ä—Å–æ—Ä–∞
		fieldView = input.Value()
		if fieldView == "" {
			fieldView = " "
		}
	} else {
		fieldView = input.View()
	}

	return lipgloss.JoinVertical(
		lipgloss.Left,
		styles.InputLabelStyle.Render(label),
		inputStyle.Width(60).Render(fieldView),
	) + "\n"
}

// attemptAddSecret - –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞
func (m FileSecretModel) attemptAddSecret(filename string) tea.Cmd {
	return func() tea.Msg {
		if filename == "" {
			return messages.ErrorMsg("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å –∏–º—è —Ñ–∞–π–ª–∞")
		}
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
		if _, err := os.Stat(m.filePathInput.Value()); err == nil {
			// –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
			content, err := os.ReadFile(m.filePathInput.Value())
			if err != nil {
				return messages.ErrorMsg("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞")
			}
			return messages.AddSecretBinaryMsg{
				Data: messages.SecretBinary{
					Name: filepath.Base(filename),
					Type: models.SecretBinaryType,
					Blob: content,
				},
			}
		}
		return messages.ErrorMsg("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
	}
}

// attemptSaveFile - –º–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –Ω–∞ –¥–∏—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
func (m FileSecretModel) attemptSaveFile(secret messages.SecretBinary) tea.Cmd {
	return func() tea.Msg {
		if secret.Blob == nil {
			return messages.ErrorMsg("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
		}

		// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
		// –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –ø—É—Ç–∏
		// –°–µ–π—á–∞—Å —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
		filename := secret.Name

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
		if _, err := os.Stat(filename); err == nil {
			return messages.ErrorMsg("–§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: " + filename)
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
		err := os.WriteFile(filename, secret.Blob, 0644)
		if err != nil {
			return messages.ErrorMsg("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: " + err.Error())
		}

		return nil
	}
}
